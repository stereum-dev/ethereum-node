import { defineStore } from "pinia";
export const useServices = defineStore("services", {
  state: () => {
    return {
      filteredServices: [],
      buttonState: [
        {
          id: 1,
          name: "graffiti",
          displayName: "Graffiti",
          icon: "/img/icon/staking-page-icons/option-graffiti.png",
          display: true,
        },
        {
          id: 2,
          name: "remove",
          displayName: "Remove all keys",
          icon: "/img/icon/staking-page-icons/option-remove.png",
          display: true,
        },
      ],
      backendServicesTimestamp: null,
      backendServices: [],
      installedServices: [],
      runningServices: [],
      allServices: [
        {
          id: 1,
          name: "Lighthouse",
          service: "LighthouseBeaconService",
          category: "consensus",
          displayCategory: "csc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          addPanel: false,
          modifierPanel: false,
          replacePanel: false,
          path: "/lighthouse",
          linkUrl: "",
          docsUrl: "https://lighthouse-book.sigmaprime.io/",
          icon: require("../../public/img/icon/service-icons/consensus/LightHouse.png"),
          sIcon: require("../../public/img/icon/service-icons/consensus/Lighthouse-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "External IP Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --enr-address=)(.*)(\\n)"],
              commands: ["--enr-address"],
            },
            {
              title: "Disable ENR auto update",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/external-ip-update.png",
              pattern: ["(- --disable-enr-auto-update=)(.*)(\\n)"],
              commands: ["--disable-enr-auto-update"],
            },
            {
              title: "External TCP/UDP port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: [
                "(- --enr-tcp-port=)(.*)(\\n)",
                "(- --enr-udp-port=)(.*)(\\n)",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/tcp",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/udp",
                "(- --port=)(.*)(\\n)",
              ],
              commands: ["--enr-tcp-port", "--enr-udp-port", "--port"],
              needsPortForwarding: true,
            },
            {
              title: "Metrics Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics-address=)(.*)(\\n)"],
              commands: ["--metrics-address"],
            },
            {
              title: "HTTP Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --http-address=)(.*)(\\n)"],
              commands: ["--http-address"],
            },
            {
              title: "Slasher",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/doppelganger.png",
              pattern: ["- --slasher"],
              commands: ["--slasher"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 2,
          name: "Lighthouse",
          service: "LighthouseValidatorService",
          category: "validator",
          displayCategory: "vlc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/lighthouse",
          linkUrl: "",
          docsUrl: "https://lighthouse-book.sigmaprime.io/",
          icon: require("../../public/img/icon/service-icons/validator/Lighthouse-Validator-Circle.png"),
          sIcon: require("../../public/img/icon/service-icons/validator/Lighthouse-Validator-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Default Fee Recipient",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/blockfee-recipient.png",
              pattern: ["(- --suggested-fee-recipient=)(.*)(\\n)"],
              commands: ["--suggested-fee-recipient"],
            },
            {
              title: "Doppelganger Protection",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/doppelganger.png",
              pattern: ["- --enable-doppelganger-protection"],
              commands: ["--enable-doppelganger-protection"],
            },
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --gas-limit=)(.*)(\\n)"],
              commands: ["--gas-limit"],
            },
            {
              title: "Metrics Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics-address=)(.*)(\\n)"],
              commands: ["--metrics-address"],
            },
            {
              title: "HTTP Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --http-address=)(.*)(\\n)"],
              commands: ["--http-address"],
            },
            {
              title: "HTTP Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --http-port=)(.*)(\\n)"],
              commands: ["--http-port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 3,
          name: "Prysm",
          service: "PrysmBeaconService",
          category: "consensus",
          displayCategory: "csc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/prysm",
          linkUrl: "",
          docsUrl: "https://docs.prylabs.network/docs/getting-started/",
          icon: require("../../public/img/icon/service-icons/consensus/Prysm.png"),
          sIcon: require("../../public/img/icon/service-icons/consensus/Prysm-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "External IP Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["( --p2p-host-ip=)(.*)(\\n)"],
              commands: ["--p2p-host-ip"],
            },
            {
              title: "External TCP/UDP port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: [
                "(--p2p-tcp-port=)(.*)(\\n)",
                "(--p2p-udp-port=)(.*)(\\n)",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/tcp",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/udp",
              ],
              commands: ["--p2p-tcp-port", "--p2p-udp-port"],
              needsPortForwarding: true,
            },
            {
              title: "Monitoring Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --monitoring-host=)(.*)(\\n)"],
              commands: ["--monitoring-host"],
            },
            {
              title: "Monitoring Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --monitoring-port=)(.*)(\\n)"],
              commands: ["--monitoring-port"],
            },
            {
              title: "RPC Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --rpc-host=)(.*)(\\n)"],
              commands: ["--rpc-host"],
            },
            {
              title: "GRPC Gateway Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --grpc-gateway-host=)(.*)(\\n)"],
              commands: ["--grpc-gateway-host"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 4,
          name: "Prysm",
          service: "PrysmValidatorService",
          category: "validator",
          displayCategory: "vlc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/prysm",
          linkUrl: "",
          docsUrl: "https://docs.prylabs.network/docs/getting-started/",
          icon: require("../../public/img/icon/service-icons/validator/Prysm-Validator-Circle.png"),
          sIcon: require("../../public/img/icon/service-icons/validator/Prysm-Validator-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Default Fee Recipient",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/blockfee-recipient.png",
              pattern: ["(--suggested-fee-recipient=)(.*)(\\n)"],
              commands: ["--suggested-fee-recipient"],
            },
            {
              title: "Doppelganger Protection",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/doppelganger.png",
              pattern: ["(--enable-doppelganger=)(.*)(\\n)"],
              commands: ["--enable-doppelganger"],
            },
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --suggested-gas-limit=)(.*)(\\n)"],
              commands: ["--suggested-gas-limit"],
            },
            {
              title: "Monitoring Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --monitoring-host=)(.*)(\\n)"],
              commands: ["--monitoring-host"],
            },
            {
              title: "Monitoring Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --monitoring-port=)(.*)(\\n)"],
              commands: ["--monitoring-port"],
            },
            {
              title: "RPC Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --rpc-host=)(.*)(\\n)"],
              commands: ["--rpc-host"],
            },
            {
              title: "GRPC Gateway Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --grpc-gateway-host=)(.*)(\\n)"],
              commands: ["--grpc-gateway-host"],
            },
            {
              title: "GRPC Gateway Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --grpc-gateway-port=)(.*)(\\n)"],
              commands: ["--grpc-gateway-port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 5,
          name: "Nimbus",
          service: "NimbusBeaconService",
          category: "consensus",
          displayCategory: "csc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/nimbus",
          linkUrl: "",
          docsUrl: "https://nimbus.guide/",
          icon: require("../../public/img/icon/service-icons/consensus/Nimbus.png"),
          sIcon: require("../../public/img/icon/service-icons/consensus/Nimbus-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Pruning Mode",
              type: "select",
              value: ["archive", "prune"],
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              unit: "",
              pattern: ["(--history=)(.*)(\\n)"],
              commands: ["--history"],
            },
            {
              title: "External IP Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --nat:extip:)(.*)(\\n)"],
              commands: ["--nat:extip:"],
              noEqualSign: true,
            },
            {
              title: "ENR auto update",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/external-ip-update.png",
              pattern: ["(- --enr-auto-update=)(.*)(\\n)"],
              commands: ["--enr-auto-update"],
            },
            {
              title: "External TCP/UDP port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: [
                "(- --tcp-port=)(.*)(\\n)",
                "(- --udp-port=)(.*)(\\n)",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/tcp",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/udp",
              ],
              commands: ["--tcp-port", "--udp-port"],
              needsPortForwarding: true,
            },
            {
              title: "Metrics Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics-address=)(.*)(\\n)"],
              commands: ["--metrics-address"],
            },
            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --metrics-port=)(.*)(\\n)"],
              commands: ["--metrics-port"],
            },
            {
              title: "Rest Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --rest-address=)(.*)(\\n)"],
              commands: ["--rest-address"],
            },
            {
              title: "Rest Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --rest-port=)(.*)(\\n)"],
              commands: ["--rest-port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 6,
          name: "Nimbus",
          service: "NimbusValidatorService",
          category: "validator",
          displayCategory: "vlc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/nimbus",
          linkUrl: "",
          docsUrl: "https://nimbus.guide/",
          icon: require("../../public/img/icon/service-icons/validator/Nimbus-Validator-Circle.png"),
          sIcon: require("../../public/img/icon/service-icons/validator/Nimbus-Validator-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Default Fee Recipient",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/blockfee-recipient.png",
              pattern: ["(- --suggested-fee-recipient=)(.*)(\\n)"],
              commands: ["--suggested-fee-recipient"],
            },
            {
              title: "Doppelganger Protection",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/doppelganger.png",
              pattern: ["(- --doppelganger-detection=)(.*)(\\n)"],
              commands: ["--doppelganger-detection"],
            },
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --suggested-gas-limit=)(.*)(\\n)"],
              commands: ["--suggested-gas-limit"],
            },
            {
              title: "Keymanager Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --keymanager-address=)(.*)(\\n)"],
              commands: ["--keymanager-address"],
            },
            {
              title: "Keymanager Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --keymanager-port=)(.*)(\\n)"],
              commands: ["--keymanager-port"],
            },
            {
              title: "Metrics Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics-address=)(.*)(\\n)"],
              commands: ["--metrics-address"],
            },
            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --metrics-port=)(.*)(\\n)"],
              commands: ["--metrics-port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 7,
          name: "Teku",
          service: "TekuBeaconService",
          category: "consensus",
          displayCategory: "csc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/teku",
          linkUrl: "",
          docsUrl: "https://docs.teku.consensys.net/",
          icon: require("../../public/img/icon/service-icons/consensus/Teku.png"),
          sIcon: require("../../public/img/icon/service-icons/consensus/Teku-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "RAM Usage Limit",
              type: "select",
              value: [2, 4, 6, 8, 10, 12, 14, 16, 20, 24, 28, 32, 48, 64],
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ram.png",
              unit: "GB",
              pattern: ["(JAVA_OPTS: -Xmx)(\\d+)(g)"],
              commands: ["JAVA_OPTS: -Xmx"],
            },
            {
              title: "External IP Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --p2p-advertised-ip=)(.*)(\\n)"],
              commands: ["--p2p-advertised-ip"],
            },
            {
              title: "External TCP/UDP port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: [
                "(- --p2p-port=)(.*)(\\n)",
                "(- --p2p-advertised-port=)(.*)(\\n)",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/tcp",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/udp",
              ],
              commands: ["--p2p-port", "--p2p-advertised-port"],
              needsPortForwarding: true,
            },
            {
              title: "Metrics Interface Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics-interface=)(.*)(\\n)"],
              commands: ["--metrics-interface"],
            },
            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --metrics-port=)(.*)(\\n)"],
              commands: ["--metrics-port"],
            },
            {
              title: "Rest API Interface Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --rest-api-interface=)(.*)(\\n)"],
              commands: ["--rest-api-interface"],
            },
            {
              title: "Rest API Interface Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --rest-api-port=)(.*)(\\n)"],
              commands: ["--rest-api-port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 8,
          name: "Teku",
          service: "TekuValidatorService",
          category: "validator",
          displayCategory: "vlc",
          displayTooltip: false,
          displayPluginMenu: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/teku",
          linkUrl: "",
          docsUrl: "https://docs.teku.consensys.net/",
          icon: require("../../public/img/icon/service-icons/validator/Teku-Validator-Circle.png"),
          sIcon: require("../../public/img/icon/service-icons/validator/Teku-Validator-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          serviceIsPending: false,
          expertOptions: [
            {
              title: "RAM Usage Limit",
              type: "select",
              value: [2, 4, 6, 8, 10, 12, 14, 16, 20, 24, 28, 32, 48, 64],
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ram.png",
              unit: "GB",
              pattern: ["(JAVA_OPTS: -Xmx)(\\d+)(g)"],
              commands: ["JAVA_OPTS: -Xmx"],
            },
            {
              title: "Default Fee Recipient",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/blockfee-recipient.png",
              pattern: ["(- --validators-proposer-default-fee-recipient=)(.*)(\\n)"],
              commands: ["--validators-proposer-default-fee-recipient"],
            },
            {
              title: "Doppelganger Protection",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/doppelganger.png",
              pattern: ["(- --doppelganger-detection-enabled=)(.*)(\\n)"],
              commands: ["--doppelganger-detection-enabled"],
            },
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --gas-limit=)(.*)(\\n)"],
              commands: ["--gas-limit"],
            },
            {
              title: "Metrics Interface Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics-interface=)(.*)(\\n)"],
              commands: ["--metrics-interface"],
            },
            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --metrics-port=)(.*)(\\n)"],
              commands: ["--metrics-port"],
            },
            {
              title: "Rest API Interface Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --validator-api-port=)(.*)(\\n)"],
              commands: ["--validator-api-port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 9,
          name: "ssv.network",
          service: "SSVNetworkService",
          category: "validator",
          displayCategory: "vlc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/ssv_network",
          icon: require("../../public/img/icon/service-icons/Other/ssv-network.png"),
          sIcon: require("../../public/img/icon/service-icons/Other/ssv-network-s.png"),
          hIcon: "/img/icon/service-icons/Other/ssv-network-s.png",
          linkUrl: "",
          docsUrl: "https://docs.ssv.network/",
          headerOption: true,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 10,
          name: "Prometheus",
          service: "PrometheusService",
          category: "service",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/prometheus",
          icon: require("../../public/img/icon/service-icons/Other/prometheus.png"),
          sIcon: require("../../public/img/icon/service-icons/Other/Prometheus-s.png"),
          hIcon: "/img/icon/service-icons/Other/Prometheus-s.png",
          linkUrl: "",
          docsUrl: "https://prometheus.io/docs/introduction/overview/",
          headerOption: true,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Data retention (in days)",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/dataretention.png",
              pattern: ["(--storage.tsdb.retention.time=)(.*)(d)"],
              commands: ["--storage.tsdb.retention.time"],
            },
          ],
          tunnelLink: true,
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 11,
          name: "Grafana",
          service: "GrafanaService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          category: "service",
          path: "/grafana",
          icon: "/img/icon/service-icons/Other/grafana-service.png",
          sIcon: "/img/icon/service-icons/Other/Grafana-s.png",
          hIcon: "/img/icon/service-icons/Other/Grafana-s.png",
          linkUrl: "",
          docsUrl: "https://grafana.com/docs/grafana/latest/",
          headerOption: true,
          expertOptionsModal: false,
          expertOptions: [],
          tunnelLink: true,
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 12,
          name: "Geth",
          service: "GethService",
          category: "execution",
          displayCategory: "exc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/geth",
          linkUrl: "",
          docsUrl: "https://geth.ethereum.org/docs/",
          icon: require("../..//public/img/icon/service-icons/execution/Geth.png"),
          sIcon: require("../../public/img/icon/service-icons/execution/Geth-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --miner.gaslimit=)(.*)(\\n)"],
              commands: ["--miner.gaslimit"],
            },
            {
              title: "RPC Authentication Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --authrpc.addr=)(.*)(\\n)"],
              commands: ["--authrpc.addr"],
            },
            {
              title: "RPC Authentication Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --authrpc.port=)(.*)(\\n)"],
              commands: ["--authrpc.port"],
            },
            {
              title: "Websocket Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --ws.addr=)(.*)(\\n)"],
              commands: ["--ws.addr"],
            },
            {
              title: "Websocket Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --ws.port=)(.*)(\\n)"],
              commands: ["--ws.port"],
            },
            {
              title: "HTTP Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --http.addr=)(.*)(\\n)"],
              commands: ["--http.addr"],
            },
            {
              title: "HTTP Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --http.port=)(.*)(\\n)"],
              commands: ["--http.port"],
            },
            {
              title: "Metrics Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics.addr=)(.*)(\\n)"],
              commands: ["--metrics.addr"],
            },
            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --metrics.port=)(.*)(\\n)"],
              commands: ["--metrics.port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 13,
          name: "Besu",
          service: "BesuService",
          category: "execution",
          displayCategory: "exc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/besu",
          linkUrl: "",
          docsUrl: "https://besu.hyperledger.org/en/stable/",
          icon: require("../..//public/img/icon/service-icons/execution/hyperLedger-besu.png"),
          sIcon: require("../../public/img/icon/service-icons/execution/HyperLedger-besu-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --target-gas-limit=)(.*)(\\n)"],
              commands: ["--target-gas-limit"],
            },
            {
              title: "P2P Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --p2p-host=)(.*)(\\n)"],
              commands: ["--p2p-host"],
            },
            {
              title: "P2P Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --p2p-port=)(.*)(\\n)"],
              commands: ["--p2p-port"],
            },
            {
              title: "RPC HTTP Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --rpc-http-host=)(.*)(\\n)"],
              commands: ["--rpc-http-host"],
            },
            {
              title: "RPC HTTP Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --rpc-http-port=)(.*)(\\n)"],
              commands: ["--rpc-http-port"],
            },
            {
              title: "RPC Websocket Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --rpc-ws-host=)(.*)(\\n)"],
              commands: ["--rpc-ws-host"],
            },
            {
              title: "RPC Websocket Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --rpc-ws-port=)(.*)(\\n)"],
              commands: ["--rpc-ws-port"],
            },
            {
              title: "Metrics Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics-host=)(.*)(\\n)"],
              commands: ["--metrics-host"],
            },
            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --metrics-port=)(.*)(\\n)"],
              commands: ["--metrics-port"],
            },
            {
              title: "Engine RPC Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --engine-rpc-port=)(.*)(\\n)"],
              commands: ["--engine-rpc-port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 14,
          name: "Nethermind",
          service: "NethermindService",
          category: "execution",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          displayCategory: "exc",
          path: "/nethermind",
          linkUrl: "",
          docsUrl: "https://docs.nethermind.io/nethermind/",
          icon: require("../..//public/img/icon/service-icons/execution/Nethermind.png"),
          sIcon: require("../../public/img/icon/service-icons/execution/Nethermind-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Pruning Mode",
              type: "select",
              value: ["Hybrid", "Memory", "Full", "None"],
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              unit: "",
              pattern: ["(--Pruning.Mode=)(.*)(\\n)"],
              commands: ["--Pruning.Mode"],
            },
            {
              title: "Available Space Check",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(--Pruning.AvailableSpaceCheckEnabled=)(.*)(\\n)"],
              commands: ["--Pruning.AvailableSpaceCheckEnabled"],
            },
            {
              title: "Cache MB",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(- --Pruning.CacheMb=)(.*)(\\n)"],
              commands: ["--Pruning.CacheMb"],
            },
            {
              title: "Persistence Interval",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(- --Pruning.PersistenceInterval=)(.*)(\\n)"],
              commands: ["--Pruning.PersistenceInterval"],
            },
            {
              title: "Pruning Boundary",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(- --Pruning.PruningBoundary=)(.*)(\\n)"],
              commands: ["--Pruning.PruningBoundary"],
            },
            {
              title: "Tracked Past Key Count Memory Ratio",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(- --Pruning.TrackedPastKeyCountMemoryRatio=)(.*)(\\n)"],
              commands: ["--Pruning.TrackedPastKeyCountMemoryRatio"],
            },
            {
              title: "Full Pruning Completion Behavior",
              type: "select",
              value: ["None", "ShutdownOnSuccess", "AlwaysShutdown"],
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              unit: "",
              pattern: ["(--Pruning.FullPruningCompletionBehavior=)(.*)(\\n)"],
              commands: ["--Pruning.FullPruningCompletionBehavior"],
            },
            {
              title: "Disable Low Priority Writes",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(--Pruning.FullPruningDisableLowPriorityWrites=)(.*)(\\n)"],
              commands: ["--Pruning.FullPruningDisableLowPriorityWrites"],
            },
            {
              title: "Max Degree Of Parallelism",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(- --Pruning.FullPruningMaxDegreeOfParallelism=)(.*)(\\n)"],
              commands: ["--Pruning.FullPruningMaxDegreeOfParallelism"],
            },
            {
              title: "Memory Budget Mb",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(- --Pruning.FullPruningMemoryBudgetMb=)(.*)(\\n)"],
              commands: ["--Pruning.FullPruningMemoryBudgetMb"],
            },
            {
              title: "Minimum Delay Hours",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(- --Pruning.FullPruningMinimumDelayHours=)(.*)(\\n)"],
              commands: ["--Pruning.FullPruningMinimumDelayHours"],
            },
            {
              title: "Threshold Mb",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["(- --Pruning.FullPruningThresholdMb=)(.*)(\\n)"],
              commands: ["--Pruning.FullPruningThresholdMb"],
            },
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --Blocks.TargetBlockGasLimit=)(.*)(\\n)"],
              commands: ["--Blocks.TargetBlockGasLimit"],
            },
            {
              title: "Network Discovery Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --Network.DiscoveryPort=)(.*)(\\n)"],
              commands: ["--Network.DiscoveryPort"],
            },
            {
              title: "Network P2P Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --Network.P2PPort=)(.*)(\\n)"],
              commands: ["--Network.P2PPort"],
            },
            {
              title: "RPC Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --JsonRpc.Host=)(.*)(\\n)"],
              commands: ["--JsonRpc.Host"],
            },
            {
              title: "RPC Engine Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --JsonRpc.EngineHost=)(.*)(\\n)"],
              commands: ["--JsonRpc.EngineHost"],
            },
            {
              title: "RPC Websocket Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --JsonRpc.WebSocketsPort=)(.*)(\\n)"],
              commands: ["--JsonRpc.WebSocketsPort"],
            },

            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --Metrics.ExposePort=)(.*)(\\n)"],
              commands: ["--Metrics.ExposePort"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 15,
          name: "NodeExporter",
          service: "PrometheusNodeExporterService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          category: "service",
          path: "/prometheusnodeexporter",
          icon: "/img/icon/service-icons/Other/PrometheusNodeExporter.png",
          sIcon: "/img/icon/service-icons/Other/PrometheusNodeExporter-s.png",
          linkUrl: "",
          docsUrl: "https://github.com/prometheus/node_exporter",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 16,
          name: "Flashbots Mev Boost",
          service: "FlashbotsMevBoostService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          category: "service",
          path: "/flashbotsmevboost",
          icon: "/img/icon/service-icons/Other/mev-icon.png",
          sIcon: "/img/icon/service-icons/Other/mev-sIcon.png",
          hIcon: "/img/icon/service-icons/Other/mev-sIcon.png",
          linkUrl: "",
          docsUrl: "https://github.com/flashbots/mev-boost",
          headerOption: true,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 17,
          name: "Web3Signer",
          service: "Web3SignerService",
          category: "validator",
          displayCategory: "vlc",
          displayTooltip: false,
          displayPluginMenu: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/web3signer",
          linkUrl: "",
          docsUrl: "https://docs.web3signer.consensys.net/en/latest/",
          icon: require("../../public/img/icon/service-icons/validator/Web3Signer-Circle.png"),
          sIcon: require("../../public/img/icon/service-icons/validator/Web3Signer-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          serviceIsPending: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 18,
          name: "Lodestar",
          service: "LodestarBeaconService",
          category: "consensus",
          displayCategory: "csc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          addPanel: false,
          modifierPanel: false,
          replacePanel: false,
          path: "/lodestar",
          linkUrl: "",
          docsUrl: "https://chainsafe.github.io/lodestar/",
          icon: require("../../public/img/icon/service-icons/consensus/Lodestar.png"),
          sIcon: require("../../public/img/icon/service-icons/consensus/Lodestar-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "External IP Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --enr.ip=)(.*)(\\n)"],
              commands: ["--enr.ip"],
            },
            {
              title: "Enable NAT",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/external-ip-update.png",
              pattern: ["(- --nat=)(.*)(\\n)"],
              commands: ["--nat"],
            },
            {
              title: "External TCP/UDP port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: [
                "(- --enr.tcp=)(.*)(\\n)",
                "(- --enr.udp=)(.*)(\\n)",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/tcp",
                "(^ {2}- (\\d{1,3}\\.){3}\\d{1,3}):([0-9]\\d{0,4}):([0-9]\\d{0,4})/udp",
                "(- --port=)(.*)(\\n)",
              ],
              commands: ["--enr.tcp", "--enr.udp", "--port"],
              needsPortForwarding: true,
            },
            {
              title: "Metrics Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics.address=)(.*)(\\n)"],
              commands: ["--metrics.address"],
            },
            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --metrics.port=)(.*)(\\n)"],
              commands: ["--metrics.port"],
            },
            {
              title: "Rest Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --rest.address=)(.*)(\\n)"],
              commands: ["--rest.address"],
            },
            {
              title: "Rest Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --rest.port=)(.*)(\\n)"],
              commands: ["--rest.port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 19,
          name: "Lodestar",
          service: "LodestarValidatorService",
          category: "validator",
          displayCategory: "vlc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/lodestar",
          linkUrl: "",
          docsUrl: "https://chainsafe.github.io/lodestar/",
          icon: require("../../public/img/icon/service-icons/validator/Lodestar-Validator-Circle.png"),
          sIcon: require("../../public/img/icon/service-icons/validator/Lodestar-Validator-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Default Fee Recipient",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/blockfee-recipient.png",
              pattern: ["(- --suggestedFeeRecipient=)(.*)(\\n)"],
              commands: ["--suggestedFeeRecipient"],
            },
            {
              title: "Doppelganger Protection",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/doppelganger.png",
              pattern: ["(- --doppelgangerProtection=)(.*)(\\n)"],
              commands: ["--doppelgangerProtection"],
            },
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --defaultGasLimit=)(.*)(\\n)"],
              commands: ["--defaultGasLimit"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 20,
          name: "Erigon",
          service: "ErigonService",
          category: "execution",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          displayCategory: "exc",
          path: "/erigon",
          linkUrl: "",
          docsUrl: "https://github.com/ledgerwatch/erigon/",
          icon: require("../../public/img/icon/service-icons/execution/Erigon.png"),
          sIcon: require("../../public/img/icon/service-icons/execution/Erigon-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --miner.gaslimit=)(.*)(\\n)"],
              commands: ["--miner.gaslimit"],
            },
            {
              title: "Prune history",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["- --prune-history"],
              commands: ["--prune-history"],
            },
            {
              title: "Prune receipts",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["- --prune-receipts"],
              commands: ["--prune-receipts"],
            },
            {
              title: "Prune transaction",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["- --prune-transaction"],
              commands: ["--prune-transaction"],
            },
            {
              title: "Prune call traces",
              type: "toggle",
              changeValue: true,
              icon: "/img/icon/service-setting-icons/prunning.png",
              pattern: ["- --prune-call-traces"],
              commands: ["--prune-call-traces"],
            },
            {
              title: "RPC Authentication Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --authrpc.addr=)(.*)(\\n)"],
              commands: ["--authrpc.addr"],
            },
            {
              title: "RPC Authentication Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --authrpc.port=)(.*)(\\n)"],
              commands: ["--authrpc.port"],
            },
            {
              title: "HTTP Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --http.addr=)(.*)(\\n)"],
              commands: ["--http.addr"],
            },
            {
              title: "HTTP Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --http.port=)(.*)(\\n)"],
              commands: ["--http.port"],
            },
            {
              title: "Metrics Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics.addr=)(.*)(\\n)"],
              commands: ["--metrics.addr"],
            },
            {
              title: "Metrics Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --metrics.port=)(.*)(\\n)"],
              commands: ["--metrics.port"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 21,
          name: "Notifications",
          service: "NotificationService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          category: "service",
          path: "/notifications",
          icon: "/img/icon/service-icons/Other/NotifierService.svg",
          sIcon: "/img/icon/service-icons/Other/NotifierService-s.png",
          linkUrl: "",
          docsUrl: "https://stereum.net/",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 22,
          name: "Validator Ejector",
          service: "ValidatorEjectorService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          category: "service",
          path: "/validatorejector",
          icon: "/img/icon/service-icons/Other/ValidatorEjector.png",
          sIcon: "/img/icon/service-icons/Other/ValidatorEjector-s.png",
          linkUrl: "",
          docsUrl: "https://enchanted-direction-844.notion.site/Validator-Exits-NO-Setup-Overview-07436e1694ce4b7091473602049664d7",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Staking Module ID",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/Operator_ID.png",
              pattern: ['(STAKING_MODULE_ID: \\")(.*)(\\"\\n)'],
              commands: ["STAKING_MODULE_ID: "],
              isENV: true,
            },
            {
              title: "Operator ID",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/Operator_ID.png",
              pattern: ['(OPERATOR_ID: \\")(.*)(\\"\\n)'],
              commands: ["OPERATOR_ID: "],
              isENV: true,
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 23,
          name: "Lido Keys API",
          service: "KeysAPIService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          category: "service",
          path: "/keysapi",
          icon: "/img/icon/service-icons/Other/LIDOKeyAPI.png",
          sIcon: "/img/icon/service-icons/Other/LIDOKeyAPI-s.png",
          linkUrl: "",
          docsUrl: "https://github.com/lidofinance/lido-keys-api",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 24,
          name: "Obol Charon",
          service: "CharonService",
          category: "validator",
          displayCategory: "vlc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/charon",
          icon: require("../../public/img/icon/service-icons/validator/ObolCharon.png"),
          sIcon: require("../../public/img/icon/service-icons/validator/ObolCharon-s.png"),
          hIcon: require("../../public/img/icon/service-icons/validator/ObolCharon-s.png"),
          linkUrl: "",
          docsUrl: "https://docs.obol.tech/docs/intro",
          headerOption: true,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 25,
          name: "Reth",
          service: "RethService",
          category: "execution",
          displayCategory: "exc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          path: "/reth",
          linkUrl: "",
          docsUrl: "https://paradigmxyz.github.io/reth/",
          icon: require("../..//public/img/icon/service-icons/execution/Reth.png"),
          sIcon: require("../../public/img/icon/service-icons/execution/Reth-s.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [
            {
              title: "Gas Limit",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/GasLimitIcon.png",
              pattern: ["(- --max_cumulative_gas=)(.*)(\\n)"],
              commands: ["--max_cumulative_gas"],
            },
            {
              title: "RPC Authentication Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --authrpc.addr=)(.*)(\\n)"],
              commands: ["--authrpc.addr"],
            },
            {
              title: "RPC Authentication Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --authrpc.port=)(.*)(\\n)"],
              commands: ["--authrpc.port"],
            },
            {
              title: "Websocket Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --ws.addr=)(.*)(\\n)"],
              commands: ["--ws.addr"],
            },
            {
              title: "Websocket Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --ws.port=)(.*)(\\n)"],
              commands: ["--ws.port"],
            },
            {
              title: "HTTP Host Address",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --http.addr=)(.*)(\\n)"],
              commands: ["--http.addr"],
            },
            {
              title: "HTTP Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/tcp_udp_port.png",
              pattern: ["(- --http.port=)(.*)(\\n)"],
              commands: ["--http.port"],
            },
            {
              title: "Metrics Host Address/Port",
              type: "text",
              changeValue: null,
              icon: "/img/icon/service-setting-icons/ip-address.png",
              pattern: ["(- --metrics=)(.*)(\\n)"],
              commands: ["--metrics"],
            },
          ],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 26,
          name: "MetricsExporter",
          service: "MetricsExporterService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          category: "service",
          path: "/metricsexporter",
          icon: "/img/icon/service-icons/Other/MetricsExporter.png",
          sIcon: "/img/icon/service-icons/Other/MetricsExporter-s.png",
          linkUrl: "",
          docsUrl: "https://github.com/gobitfly/eth2-client-metrics-exporter",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 27,
          name: "External",
          service: "ExternalConsensusService",
          category: "consensus",
          displayCategory: "csc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          addPanel: false,
          modifierPanel: false,
          replacePanel: false,
          path: "/external",
          linkUrl: "",
          docsUrl: "",
          icon: require("/public/img/icon/service-icons/consensus/external-connection-consensus.png"),
          sIcon: require("/public/img/icon/service-icons/Other/consensusExternal.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
            source: "",
            gateway: "",
          },
        },
        {
          id: 28,
          name: "External",
          service: "ExternalExecutionService",
          category: "execution",
          displayCategory: "exc",
          displayTooltip: false,
          displayPluginMenu: false,
          serviceIsPending: false,
          addPanel: false,
          modifierPanel: false,
          replacePanel: false,
          path: "/external",
          linkUrl: "",
          docsUrl: "",
          icon: require("/public/img/icon/service-icons/execution/external-connection-execution.png"),
          sIcon: require("/public/img/icon/service-icons/Other/executionExternal.png"),
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
            source: "",
            jwtToken: "",
          },
        },
        {
          id: 29,
          name: "Custom",
          service: "CustomService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          configPanel: false,
          category: "service",
          path: "/customservice",
          icon: "/img/icon/plugin-icons/Other/custom-service.png",
          sIcon: "/img/icon/plugin-icons/Other/custom-service-s.png",
          linkUrl: "",
          docsUrl: "https://www.google.com/",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 30,
          name: "LidoObolExit",
          service: "LidoObolExitService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          configPanel: false,
          category: "service",
          path: "/lidoobolexit",
          icon: "/img/icon/service-icons/Other/LidoObolExitService.png",
          sIcon: "/img/icon/service-icons/Other/LidoObolExitService-s.png",
          linkUrl: "",
          docsUrl: "https://github.com/ObolNetwork/lido-charon-distributed-validator-node/tree/main",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 31,
          name: "SSV DKG",
          service: "SSVDKGService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          configPanel: false,
          category: "service",
          path: "/ssvdkg",
          icon: "/img/icon/service-icons/Other/SSV-Network-DKG-Service.png",
          sIcon: "/img/icon/service-icons/Other/SSV-Network-DKG-s.png",
          hIcon: "/img/icon/service-icons/Other/SSV-Network-DKG-s.png",
          linkUrl: "",
          docsUrl: "https://docs.ssv.network/developers/tools/ssv-dkg-client/",
          headerOption: false, // TODO: Wire and enable DKG modal ASAP
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 32,
          name: "CSM Monitoring",
          service: "LCOMService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          configPanel: false,
          category: "service",
          path: "/lcoms",
          icon: "/img/icon/service-icons/Other/LCOM.png",
          sIcon: "/img/icon/service-icons/Other/LCOM-s.png",
          linkUrl: "",
          docsUrl: "https://github.com/stereum-dev/lido-csm-operator-monitoring-service",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
        {
          id: 33,
          name: "Kubo IPFS",
          service: "KuboIPFSService",
          displayPluginMenu: false,
          serviceIsPending: false,
          modifierPanel: false,
          replacePanel: false,
          addPanel: false,
          configPanel: false,
          category: "service",
          path: "/ipfs",
          icon: "/img/icon/service-icons/Other/IPFS.png",
          sIcon: "/img/icon/service-icons/Other/IPFS-s.png",
          linkUrl: "",
          docsUrl: "https://docs.ipfs.tech/",
          headerOption: false,
          expertOptionsModal: false,
          expertOptions: [],
          drag: true,
          state: "exited",
          config: {
            serviceID: "",
            configVersion: "",
            image: "",
            imageVersion: "",
            ports: [],
            volumes: [],
            network: "",
          },
        },
      ],
      versions: {},
      stereumVersion: {},
      launcherVersion: "",
      newUpdates: [],
    };
  },
  getters: {},
  actions: {},
});
