---
- name: Read service file
  slurp:
    src: "{{ item.path }}"
  register: service_configuration_raw

- name: Parse service's configuration
  set_fact:
    service_configuration: "{{ service_configuration_raw['content'] | b64decode | from_yaml }}"
    service_configuration_text: "{{ service_configuration_raw['content'] | b64decode }}"
    
- name: Set data dir path
  set_fact:
    service_configuration_data_path: "{{ service_configuration.volumes | select('match', '.*\/opt\/app\/data') | first | split(':') | first  }}"
  when: service_configuration.service == "TekuBeaconService"

- name: ensure dir exists
  file:
    path: "{{ service_configuration_data_path }}"
    state: directory
  become: yes
  when: service_configuration.service == "TekuBeaconService"

- name: Check if keystore file exists
  stat: 
    path: "{{ service_configuration_data_path }}/teku_api_keystore"
  register: stat_teku_api_keystore
  when: service_configuration.service == "TekuBeaconService"

- name: Delete keystore file
  file:
    path: "{{ service_configuration_data_path }}/teku_api_keystore"
    state: absent
  when: service_configuration.service == "TekuBeaconService" and stat_teku_api_keystore.stat.exists
  changed_when: false
  become: yes

- name: Check if password file exists
  stat: 
    path: "{{ service_configuration_data_path }}/teku_api_password.txt"
  register: stat_teku_api_password
  when: service_configuration.service == "TekuBeaconService"

- name: Create the password file, if it doesnt exist already
  copy:
    content: "{{ lookup('password', '/dev/null', seed=inventory_hostname) }}"
    dest: "{{ service_configuration_data_path }}/teku_api_password.txt"
    force: no
  when: service_configuration.service == "TekuBeaconService" and not stat_teku_api_password.stat.exists

- name: Get teku-api password
  slurp:
    src: "{{ service_configuration_data_path }}/teku_api_password.txt"
  register: teku_api_password
  when: service_configuration.service == "TekuBeaconService"
  become: yes

- name: Set variable
  set_fact:
    api_password: "{{ teku_api_password['content'] | b64decode | trim }}"
  when: service_configuration.service == "TekuBeaconService"

- name: install keytool (Ubuntu)
  apt:
    update_cache: yes
    name:
      - openjdk-8-jre-headless
    state: present
  become: true
  changed_when: false
  when: service_configuration.service == "TekuBeaconService" and ansible_distribution == "Ubuntu"

- name: install keytool (CentOS)
  raw: yum install -y java-1.8.0-openjdk
  become: true
  changed_when: false
  when: service_configuration.service == "TekuBeaconService" and ansible_distribution == "CentOS"

- name: Create keystore file
  command: bash -c "keytool -genkeypair
                    -keystore teku_api_keystore
                    -storetype PKCS12
                    -storepass '{{ api_password }}'
                    -keyalg RSA
                    -keysize 2048
                    -validity 109500
                    -dname 'CN=teku, OU=MyCompanyUnit, O=MyCompany, L=MyCity, ST=MyState, C=AU'
                    -ext 'SAN=DNS:stereum-{{ service_configuration.id }}'"
  args:
    chdir: "{{ service_configuration_data_path }}"
  changed_when: false
  when: service_configuration.service == "TekuBeaconService"
  become: yes

- name: set keystore locking
  replace:
    path: "{{ item.path }}"
    regexp: "--validators-keystore-locking-enabled=false"
    replace: "--validators-keystore-locking-enabled=true"
  when: service_configuration.service == "TekuBeaconService"