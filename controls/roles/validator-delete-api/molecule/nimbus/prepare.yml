---
- name: Prepare
  hosts: all
  vars_files:
    - ../../../../defaults/stereum_defaults.yaml
  vars:
    beacon_service: 9ffc35c2-e7ef-11ec-bea9-7795f6ff7cd2
    validator_password: "MyTestPassword"
    validator_keys:
       - name: keystore-m_12381_3600_0_0_0-1637577658.json
         content: '{"crypto": {"kdf": {"function": "scrypt", "params": {"dklen": 32, "n": 262144, "r": 8, "p": 1, "salt": "de4b32f49572c01146afb11a82c326fdc03be6cf447983daf9eb7ec0f868a116"}, "message": ""}, "checksum": {"function": "sha256", "params": {}, "message": "1ccb24f0f1469ab56cc0147dae242aab59ff360177c8ec4f710966913da839b6"}, "cipher": {"function": "aes-128-ctr", "params": {"iv": "a24857026939492f49444679544cb6bb"}, "message": "b5d944adfb65e33873c5c1b809c3c15b558821f2829cd7e9da1df65d0b78fdb6"}}, "description": "", "pubkey": "acaa51756fb445b406c9e599f3f4bec991f7799c002619566ab1fa5b70445c62f1ac6561154ca5e49d7542dbe690b96b", "path": "m/12381/3600/0/0/0", "uuid": "1ea9ed13-e3bb-4555-99d9-c5e83ab9eb67", "version": 4}'
       - name: keystore-m_12381_3600_1_0_0-1637577659.json
         content: '{"crypto": {"kdf": {"function": "scrypt", "params": {"dklen": 32, "n": 262144, "r": 8, "p": 1, "salt": "de4b32f49572c01146afb11a82c326fdc03be6cf447983daf9eb7ec0f868a116"}, "message": ""}, "checksum": {"function": "sha256", "params": {}, "message": "3691a02425a4607b86292313cc72e31d4866043034ee9cff0b7cab2096105269"}, "cipher": {"function": "aes-128-ctr", "params": {"iv": "a24857026939492f49444679544cb6bb"}, "message": "e8a184e9d70408acd33459c67632c7bb63cf9c58a175de2030f962da88a2eb4d"}}, "description": "", "pubkey": "82ed748ffbc23ee3b730577a81f4cd05fe7dba234b3de5efc31f53de67091de9631d8581d72892351dfad52b65e53fbf", "path": "m/12381/3600/1/0/0", "uuid": "f712f984-b926-4e90-a603-f3f14703bf4b", "version": 4}'
       - name: keystore-m_12381_3600_2_0_0-1637577660.json
         content: '{"crypto": {"kdf": {"function": "scrypt", "params": {"dklen": 32, "n": 262144, "r": 8, "p": 1, "salt": "de4b32f49572c01146afb11a82c326fdc03be6cf447983daf9eb7ec0f868a116"}, "message": ""}, "checksum": {"function": "sha256", "params": {}, "message": "fa52987837af01ec48e2b21f2078acef3368983943751013758052e07dae841d"}, "cipher": {"function": "aes-128-ctr", "params": {"iv": "a24857026939492f49444679544cb6bb"}, "message": "8c055c8c504cd3ad20bcb1101431b2b1a506b1a4d0efdbd294d75c39c0f2268b"}}, "description": "", "pubkey": "948f092cb5b5cae121fdc14af0e4e5a90d03ab661266b700ded1c1ca4fd6f0a76f8dac187815409197bf036675571458", "path": "m/12381/3600/2/0/0", "uuid": "c7521eed-533a-4fd1-90b7-ad1aa0f24a2d", "version": 4}'

  tasks:
    - name: Install python for Ansible (Ubuntu)
      raw: apt update && apt install -y pip
      become: true
      changed_when: false
      when: ansible_distribution == "Ubuntu"

    - name: Install python for Ansible (CentOS 8)
      raw: yum install -y python38 tar && yum remove -y python36
      become: true
      changed_when: false
      when: ansible_distribution == "CentOS"

    - name: Install pip, expect (Ubuntu)
      apt:
        update_cache: yes
        name:
          - python3-pip
          - expect
      become: true
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Install pip, expect (CentOS 8)
      yum:
        name:
          - python3-pip
          - expect
        state: latest
      become: true
      when: ansible_distribution == "CentOS"

    - include_role:
        name: "setup"

    - include_role:
        name: "configure-firewall"

    # nimbus beacon & validator service
    - block:
      - set_fact:
          stereum: "{{ stereum_static | combine(stereum_args, recursive=True) }}"
      - name: "Include manage-service"
        include_role:
          name: "manage-service"
      - name: Create api-token file
        copy:
          content: "{{ lookup('password', '/dev/null', seed=inventory_hostname) }}"
          dest: /opt/app/services/{{ beacon_service }}/validator/api-token.txt
          force: no
        become: yes
      - name: Waiting for the services to start properly
        pause:
          minutes: 5
      vars:
        stereum_args:
          manage_service:
            save: true
            state: started
            configuration:
              id: "{{ beacon_service }}"
              image: statusim/nimbus-eth2:multiarch-v22.5.2
              ports:
                - 0.0.0.0:9000:9000/tcp
                - 0.0.0.0:9000:9000/udp
                - 127.0.0.1:9190:9190/tcp
                - 127.0.0.1:5052:5052/tcp
              env: {}
              entrypoint: ["/home/user/nimbus-eth2/build/nimbus_beacon_node"]
              command:
                - --network=prater
                - --data-dir=/opt/app/beacon
                - --validators-dir=/opt/app/validators
                - --secrets-dir=/opt/app/secrets
                - --web3-url=ws://10.10.0.2:8545
                - --tcp-port=9000
                - --udp-port=9000
                - --rpc
                - --rpc-port=9190
                - --rpc-address=0.0.0.0
                - --metrics
                - --metrics-port=8008
                - --metrics-address=0.0.0.0
                - --rest
                - --rest-address=0.0.0.0
                - --rest-port=5052
                - --graffiti="stereum.net"
                - --keymanager
                - --keymanager-address=0.0.0.0
                - --keymanager-token-file=/opt/app/validators/api-token.txt
              user: "2000"
              volumes:
                - "/opt/app/services/{{ beacon_service }}/beacon:/opt/app/beacon"
                - "/opt/app/services/{{ beacon_service }}/validator:/opt/app/validators"
                - "/opt/app/services/{{ beacon_service }}/validator/secrets:/opt/app/secrets"

    - block:
      - name: Nimbus - Get validator service's api token
        command: "docker exec -u 0 -w /opt/app/validators stereum-{{ beacon_service }} cat api-token.txt"
        changed_when: false
        register: api_token
        become: yes
      - name: Print out api_token
        debug:
          msg: "{{ api_token.stdout }}"
      - name: Nimbus import-validator using API
        uri:
          url: http://localhost:5052/eth/v1/keystores
          headers:
            Content-Type: application/json
            Authorization: "Bearer {{ api_token.stdout }}"
          method: POST
          body:
            keystores: ["{{ item.content }}"]
            passwords: ["{{ validator_password | quote }}"]
          body_format: json
        become: yes
        with_items: "{{ validator_keys }}"
