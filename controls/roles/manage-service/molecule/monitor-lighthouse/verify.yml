---
- name: Verify
  hosts: all
  gather_facts: false
  tasks:
  - stat: path=/etc/stereum/services
    register: stereum_services_dir
  - debug:
      msg: "{{ stereum_services_dir }}"
  # ufw
  - shell: ufw status
    register: stereum_ufw_status
  - debug:
      msg: "{{ stereum_ufw_status }}"
  - assert:
      that:
      - stereum_ufw_status.stdout.find("9000/tcp") != -1
      - stereum_ufw_status.stdout.find("9000/udp") != -1
      - stereum_ufw_status.stdout.find("5052/tcp") != -1
      - stereum_ufw_status.stdout.find("9090/tcp") != -1
      - stereum_ufw_status.stdout.find("3000/tcp") != -1
  # grafana config files
  - stat: path=/opt/app/services/59827650-8ac6-11ec-81ec-f3dc0fb8f30e/grafana/grafana.ini
    register: grafana_ini
  - debug:
      msg: "{{ grafana_ini }}"
  - stat: path=/opt/app/services/59827650-8ac6-11ec-81ec-f3dc0fb8f30e/grafana/provisioning/dashboards/BeaconProcessing.json
    register: grafana_dashboard
  - debug:
      msg: "{{ grafana_dashboard }}"
  - stat: path=/opt/app/services/59827650-8ac6-11ec-81ec-f3dc0fb8f30e/grafana/provisioning/datasources/datasource.yml
    register: grafana_datasource
  - debug:
      msg: "{{ grafana_datasource }}"
  - name: Check for grafana config files
    assert:
      that:
        - grafana_ini.stat.exists
        - grafana_dashboard.stat.exists
        - grafana_datasource.stat.exists
  - name: Waiting for the services to start properly
    pause:
      minutes: 2
  #  grafana logs
  - name: Grafana
    command: "docker logs --tail=100 stereum-59827650-8ac6-11ec-81ec-f3dc0fb8f30e"
    register: grafana
  #  prometheus logs
  - name: Prometheus
    command: "docker logs --tail=100  stereum-4f260e42-8ac6-11ec-abba-4be6f5fee8db"
    register: prometheus
  #  node exporter logs
  - name: Node exporter
    command: "docker logs --tail=100 stereum-ef7d66cc-9022-11ec-8bd0-57e35985136a"
    register: node_exporter
  #  lighthouse beacon logs
  - name: Lighthouse beacon
    command: "docker logs --tail=200 stereum-cbf9f518-8ac7-11ec-8da2-ebc33b8d2c86"
    register: lighthouse_beacon
  - assert:
      that:
      - grafana.stdout.find("HTTP Server Listen") != -1
      - grafana.stdout.find("can't read datasource provisioning files from directory") == -1
      - grafana.stdout.find("can't read dashboard provisioning files from directory") == -1
      - prometheus.stderr.find("Server is ready to receive web requests") != -1
      - prometheus.stderr.find("Error loading config") == -1
      - node_exporter.stderr.find("Listening on") != -1
      - lighthouse_beacon.stderr.find("est_time") != -1
      - lighthouse_beacon.stderr.find("eth1-endpoints contains an invalid URL") == -1
      - lighthouse_beacon.stderr.find("Error connecting to eth1 node endpoint") == -1
  # container's images & ports
  - shell: docker ps
    register: stereum_docker_ps
  - debug:
      msg: "{{ stereum_docker_ps }}"
  - assert:
      that:
      - stereum_docker_ps.stdout.find("grafana/grafana") != -1
      - stereum_docker_ps.stdout.find("prom/node-exporter") != -1
      - stereum_docker_ps.stdout.find("prom/prometheus") != -1
      - stereum_docker_ps.stdout.find("stereum/lighthouse") != -1
      - stereum_docker_ps.stdout.find("3000->3000") != -1
      - stereum_docker_ps.stdout.find("9100/tcp") != -1
      - stereum_docker_ps.stdout.find("9090->9090") != -1
      - stereum_docker_ps.stdout.find("5052->5052") != -1
      - stereum_docker_ps.stdout.find("9000->9000") != -1
      - (stereum_docker_ps.stdout|regex_findall("Up")|length) == 4

# EOF
